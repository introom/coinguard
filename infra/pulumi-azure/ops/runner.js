"use strict";

const azure = require("@pulumi/azure-native");
const azure_classic = require("@pulumi/azure");
const azuread = require("@pulumi/azuread");

const config = require("./config");
const util = require("./util");
const registry = require("./container-registry");

const runnerName = util.resourceName`runner`;
const resourceGroup = new azure.resources.ResourceGroup(runnerName);

const virtualNetwork = new azure.network.VirtualNetwork(runnerName, {
  resourceGroupName: resourceGroup.name,
  addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
  subnets: [
    {
      name: resourceGroup.name,
      addressPrefix: "10.0.1.0/24",
    },
  ],
});

const publicIp = new azure.network.PublicIPAddress(runnerName, {
  resourceGroupName: resourceGroup.name,
  publicIPAllocationMethod: azure.network.IPAllocationMethod.Static,
});

const networkSecurityGroup = new azure.network.NetworkSecurityGroup(
  runnerName,
  {
    resourceGroupName: resourceGroup.name,
    // see https://www.pulumi.com/registry/packages/azure-native/api-docs/network/networksecuritygroup/#securityrule
    securityRules: [
      {
        name: "Allow SSH",
        direction: "Inbound",
        access: "Allow",
        protocol: "*",
        destinationAddressPrefix: "*",
        destinationPortRange: "22",
        sourceAddressPrefix: "*",
        sourcePortRange: "*",
        priority: 100,
      },
      {
        name: "Reject all traffics",
        direction: "Inbound",
        access: "Deny",
        protocol: "*",
        destinationAddressPrefix: "*",
        destinationPortRange: "*",
        sourceAddressPrefix: "*",
        sourcePortRange: "*",
        priority: 4096,
      },
    ],
  }
);

const networkInterface = new azure.network.NetworkInterface(runnerName, {
  resourceGroupName: resourceGroup.name,
  ipConfigurations: [
    {
      name: resourceGroup.name,
      subnet: { id: virtualNetwork.subnets[0].id },
      privateIPAllocationMethod: azure.network.IPAllocationMethod.Dynamic,
      publicIPAddress: { id: publicIp.id },
    },
  ],
  networkSecurityGroup: { id: networkSecurityGroup.id },
});

const vm = new azure.compute.VirtualMachine(runnerName, {
  resourceGroupName: resourceGroup.name,
  networkProfile: {
    networkInterfaces: [{ id: networkInterface.id }],
  },
  // https://azureprice.net/
  // az vm list-skus --location westus2 --size Standard_D --all --output table
  hardwareProfile: {
    vmSize: "Standard_D2s_v5",
  },
  osProfile: {
    computerName: runnerName,
    adminUsername: "firepanda",
    adminPassword: config.raw.requireSecret("runnerPassword"),
    linuxConfiguration: {
      disablePasswordAuthentication: false,
    },
  },
  storageProfile: {
    osDisk: {
      createOption: azure.compute.DiskCreateOption.FromImage,
      diskSizeGB: 128,
    },
    // see: az vm image list --location westus2 --publisher Debian --output table --all
    imageReference: {
      publisher: "Debian",
      offer: "debian-11-daily",
      sku: "11-gen2",
      // version: "0.20220225.929",
      version: "latest",
    },
  },
});

// runner principal
const spName = util.resourceName`runner`;
const sp = new azuread.ServicePrincipal(spName, {
  applicationId: new azuread.Application(spName, {
    displayName: spName,
  }).applicationId,
});

const spPassword = new azuread.ServicePrincipalPassword(spName, {
  servicePrincipalId: sp.id,
  // password is auto generated by azure
});

const spAuth = new azure_classic.authorization.Assignment(spName, {
  scope: registry.registry.id,
  // acrpush 
  roleDefinitionName: "acrpull",
  principalId: sp.id,
});

// XXX hacky, get the credentials
// sp.applicationId.apply( val => console.log(val))
// spPassword.value.apply( val => console.log(val))
